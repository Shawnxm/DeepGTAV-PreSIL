#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from deepgtav.messages import Start, Stop, Dataset, Scenario, Commands, frame2numpy
from deepgtav.client import Client
from deepgtav.export import printInstances, printCalib

import os
import argparse
import time
import cv2


width = 1280
height = 720
index = 0 #Use startIndex to change index to start on
startIndex = 0
oldExport = False
recordScenario = False
positionScenario = False
tracking = False
collectStationary = False
collectVehicles = True
collectPeds = True
collectOffscreen = False
captureRate = 1
driveMode = 786603 #Normal?

base_folder = os.environ['DEEPGTAV_EXPORT_DIR'] + "\\"
if tracking:
    base_folder = base_folder + "tracking\\"
    collectVehicles = True
    collectPeds = True
    collectOffscreen = False
    captureRate = 25
    driveMode = 537657771 #stop at lights; use blinkers; avoid highways
else:
    base_folder = base_folder + "object\\"


class Model:
    def run(self,frame):
        return [1.0, 0.0, 0.0] # throttle, brake, steering

# Controls the DeepGTAV vehicle
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=None)
    parser.add_argument('-l', '--host', default='localhost', help='The IP where DeepGTAV is running')
    parser.add_argument('-p', '--port', default=8000, help='The port where DeepGTAV is running')
    args = parser.parse_args()

    # Creates a new connection to DeepGTAV using the specified ip and port. 
    # If desired, a dataset path and compression level can be set to store in memory all the data received in a gziped pickle file.
    # We don't want to save a dataset in this case
    client = Client(ip=args.host, port=args.port)

    # We set the scenario to be in manual driving, and everything else random (time, weather and location). 
    # See deepgtav/messages.py to see what options are supported
    # dataset = Dataset(rate=captureRate,
    #                     frame=[width,height],
    #                     throttle=True,
    #                     brake=True,
    #                     steering=True,
    #                     vehicles=collectVehicles,
    #                     peds=collectPeds,
    #                     reward=[15.0, 0.0],
    #                     direction=None,
    #                     speed=True,
    #                     yawRate=True,
    #                     location=True,
    #                     time=True,
    #                     offscreen=collectOffscreen,
    #                     showBoxes=False,
    #                     pointclouds=True,
    #                     stationaryScene=False,
    #                     collectTracking=tracking,
    #                     startIndex=startIndex)
    dataset = Dataset(rate=20,
                        frame=[width,height],
                        throttle=True,
                        brake=True,
                        steering=True,
                        vehicles=True,
                        peds=False,
                        reward=[15.0, 0.5],
                        direction=[1234.8, 354.3, 0],
                        yawRate=False,
                        time=False)
    scenario = Scenario(drivingMode=-1) #manual driving
    
    # Send the Start request to DeepGTAV. Dataset is set as default, we only receive frames at 10Hz (320, 160)
    client.sendMessage(Start(dataset=dataset,scenario=scenario))

    # Dummy agent
    # model = Model()

    # Start listening for messages coming from DeepGTAV. We do it for 80 hours
    stoptime = time.time() + 80*3600
    print("check3")
    while time.time() < stoptime:
        try:
            # We receive a message as a Python dictionary
            print("check4")
            message = client.recvMessage()  
            print("check5")

            # The frame is a numpy array that can we pass through a CNN for example     
            image = frame2numpy(message['frame'], (320,160))
            commands = model.run(image)
            # We send the commands predicted by the agent back to DeepGTAV to control the vehicle
            client.sendMessage(Commands(commands[0], commands[1], commands[2]))
        except KeyboardInterrupt:
            break

        # if not recordScenario and not positionScenario:
        #     try:
        #         # We receive a message as a Python dictionary
        #         print("check4")
        #         message = client.recvMessage()  
        #         print("check5")
        #         index = message['index']

        #         print("Starting index %d" % index)
        #         if tracking:
        #             indexString = "%04d\\%06d" % (message['seriesIndex'], index)
        #         else:
        #             indexString = "%06d" % index
                
        #         if oldExport:
        #             # The frame is a numpy array and can be displayed using OpenCV or similar       
        #             image = frame2numpy(message['frame'], (width,height))
        #             filename = "%simage_2\\%s.png" % (base_folder, indexString)
        #             ensureDirExists(filename)
        #             cv2.imwrite(filename, image)
        #             print("image written index %d" % index)
                    
        #             #Output tracking labels
        #             if tracking:
        #                 filename = "%slabels_tracking\\%04d.txt" % (base_folder, message['seriesIndex'])
        #                 ensureDirExists(filename)
        #                 text_file = open(filename, "a")
        #                 text_file.write("")
        #                 text_file.close()
        #                 if collectVehicles:
        #                     printInstances(filename, message['vehicles'], False, True, index)
        #                 if collectPeds:
        #                     printInstances(filename, message['peds'], False, True, index)
                    
        #             #Output object detections
        #             filename = "%slabels\\%s.txt" % (base_folder, indexString)
        #             ensureDirExists(filename)
        #             text_file = open(filename, "w")
        #             text_file.write("")
        #             text_file.close()
        #             if collectVehicles:
        #                 printInstances(filename, message['vehicles'], False)
        #             if collectPeds:
        #                 printInstances(filename, message['peds'], False)
                    
        #             #Output unprocessed detections (For testing)
        #             filename = "%slabels_unprocessed\\%s.txt" % (base_folder, indexString)
        #             ensureDirExists(filename)
        #             text_file = open(filename, "w")
        #             text_file.write("")
        #             text_file.close()
        #             if collectVehicles:
        #                 printInstances(filename, message['vehicles'], False, False, index, False)
        #             if collectPeds:
        #                 printInstances(filename, message['peds'], False, False, index, False)
                    
        #             #Output object detections with augmentations
        #             filename = "%slabels_aug\\%s.txt" % (base_folder, indexString)
        #             ensureDirExists(filename)
        #             text_file = open(filename, "w")
        #             text_file.write("")
        #             text_file.close()
        #             if collectVehicles:
        #                 printInstances(filename, message['vehicles'], True)
        #             if collectPeds:
        #                 printInstances(filename, message['peds'], True)

        #             #Print calib file
        #             if tracking:
        #                 if index == 0:
        #                     filename = "%scalib\\%04d.txt" % (base_folder, message['seriesIndex'])
        #                     ensureDirExists(filename)
        #                     printCalib(filename, message['focalLen'], width, height)
        #             else:
        #                 filename = "%scalib\\%s.txt" % (base_folder, indexString)
        #                 ensureDirExists(filename)
        #                 printCalib(filename, message['focalLen'], width, height)

        #             curPosition = message['curPosition']
        #             if tracking:
        #                 # TODO: there is no in-game time reference that properly correlates night/day and real time between frames
        #                 # filename = "%s\\oxts\\%04d\\timestamps.txt" % (base_folder, message['seriesIndex'])
        #                 # ensureDirExists(filename)
        #                 # text_file = open(filename, "a")
        #                 # text = message['time']
        #                 # dateString = datetime.date.today().strftime("%Y-%m-%d")
        #                 # text_file.write("%s %s\n" % (dateString, text))
        #                 # text_file.close()

        #                 filename = "%soxts\\data\\%s.txt" % (base_folder, indexString)
        #                 ensureDirExists(filename)
        #                 text_file = open(filename, "w")
        #                 #
        #                 text_file.write("%f %f %f %f %f %f %f\n" % (curPosition[0], curPosition[1], curPosition[2],
        #                     curPosition[3], curPosition[4], curPosition[5], message['speed']))
        #                 text_file.close()


        #             #Output current location:
        #             outputCurrLocation = False
        #             if outputCurrLocation:
        #                 filename = "%slocation.txt" % (base_folder)
        #                 ensureDirExists(filename)
        #                 text_file = open(filename, "w")
        #                 text_file.write("x: %d, y: %d, z: %d, heading %d" % (curPosition[0], curPosition[1], curPosition[2], curPosition[3]))
        #                 text_file.close()
        #             print("ending index %d" % index)

        #     except KeyboardInterrupt:
        #         break
            
    # We tell DeepGTAV to stop
    client.sendMessage(Stop())
    client.close()
